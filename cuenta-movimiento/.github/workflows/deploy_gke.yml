name: Build and Deploy to GKE

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# save the output of the check_changes job
on:
  workflow_call:
    outputs:
      src_changed:
        description: 'Whether the src/ directory has changed'
        value: ${{ jobs.check_changes.outputs.src_changed }}
      k8s_changed:
        description: 'Whether the k8s/ directory has changed'
        value: ${{ jobs.check_changes.outputs.k8s_changed }}
      apiVer:
        description: 'The API version'
        value: ${{ jobs.check_changes.outputs.apiVer }}

  push:
    branches:
      # - master
      - feature/force-*
      #- feature/fix-*
      # - develop
    # paths: 
    #   - 'src/**'
    #   - 'k8s/**'
    paths-ignore:
      - '**.md'
      - 'doc/**'
      - '.git/**'
      - '.vscode/**'
      - 'postman/**'
      - 'infraestructure/**'
      - 'bruno/**'
  # pull_request:
  #   branches:
  #     - master
  #     - main
  #     - develop
  #   types:
  #     - closed
  #   paths-ignore:
  #     - '**.md'
  #     - 'doc/**'
  #     - '.git/**'
  #     - '.vscode/**'
  #     - 'postman/**'
  #     - 'infraestructure/**'

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  SERVICE: ${{ vars.SERVICE }}
  #REGION: ${{ vars.REGION }}
  REGION: southamerica-west1
  # GKE_CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  GKE_CLUSTER_NAME: safe-wave
  APP_NAME: ${{ vars.APP_NAME }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  GOOGLE_CALLBACK_URL: ${{ vars.GOOGLE_CALLBACK_URL }}
  MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
  LOG_LEVEL: ${{ vars.LOG_LEVEL }}
  GLOBAL_PREFIX: ${{ vars.GLOBAL_PREFIX }}
  REQUEST_TIMEOUT: ${{ vars.REQUEST_TIMEOUT }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  PORT: ${{ vars.PORT }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  GCP_CREDENTIALS_B64: ${{ secrets.GCP_CREDENTIALS_B64 }}
  SWAGGER_NAME: ${{ vars.SWAGGER_NAME }}
  SWAGGER_DESCRIPTION: ${{ vars.SWAGGER_DESCRIPTION }}
  SWAGGER_VERSION: ${{ vars.SWAGGER_VERSION }}
  SWAGGER_CONTACT_NAME: ${{ vars.SWAGGER_CONTACT_NAME }}
  SWAGGER_CONTACT_EMAIL: ${{ vars.SWAGGER_CONTACT_EMAIL }}
  SWAGGER_URL: ${{ vars.SWAGGER_URL }}
  ALLOWED_AUTHORS: ${{ vars.ALLOWED_AUTHORS }}
  DEPLOY_ENV: ${{ github.ref == 'refs/heads/master' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || 'dev' }}
  ##   MONGO_DB_NAME: ${{ vars.MONGO_DB_NAME }}
  ## TODO: change this to use the MONGO_DB_NAME variable or to prod or dev
  MONGO_DB_NAME: ${{ github.ref == 'refs/heads/master' && 'test' || github.ref == 'refs/heads/develop' && 'test' || 'test' }}
  SRV_VALIDATIONS: ${{ vars.SRV_VALIDATIONS }}
  IMAGE_CONTAINER: ""
jobs:
  permission:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Check users
        id: checkusers
        env:
          ALLOWED_AUTHORS: ${{ vars.ALLOWED_AUTHORS }}
        run: |
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
          echo "Allowed Authors: ${{ vars.ALLOWED_AUTHORS }}"
          echo "Github Actor: ${{ github.actor }}"
          
          if echo "$ALLOWED_AUTHORS" | grep -q "${{ github.actor }}"; then
            echo "Allowed actor: ${{ github.actor }}"
          else
            echo "Not allowed actor: ${{ github.actor }}"
            exit 1
          fi

      - name: ‚¨áÔ∏è Check event
        id: checkevent
        run: |
          echo "Github Event: ${{ github.event_name }}"
          echo "Github Ref: ${{ github.ref }}"
          echo "Github Workflow: ${{ github.workflow }}"
          echo "Github Workflow Path: ${{ github.workflow_path }}"
          echo "Github Workspace: ${{ github.workspace }}"
          echo "Github Repository: ${{ github.repository }}"
          echo "Github Repository Owner: ${{ github.repository_owner }}"
          echo "Github Repository Name: ${{ github.repository_name }}"
          echo "Github Repository URL: ${{ github.repository_url }}"
          echo "Github Repository Default Branch: ${{ github.repository_default_branch }}"
          echo "Github Run ID: ${{ github.run_id }}"
          echo "Github Run Number: ${{ github.run_number }}"
          echo "Github Run Attempt: ${{ github.run_attempt }}"
          echo "Github Action: ${{ github.action }}"
          echo "Github Action Path: ${{ github.action_path }}"
          echo "Github Action Ref: ${{ github.action_ref }}"
          echo "Github Action Repository: ${{ github.action_repository }}"
          echo "Github Action Repository Owner: ${{ github.action_repository_owner }}"
          echo "Github Action Repository Name: ${{ github.action_repository_name }}"
          echo "Github Action Repository URL: ${{ github.action_repository_url }}"
          echo "Github Action Workspace: ${{ github.action_workspace }}"
          echo "Github Action Token: ${{ github.token }}"
          echo "Github Action Event Path: ${{ github.event_path }}"
          echo "Github Action Event Name: ${{ github.event_name }}"
          echo "Github Action Event Path: ${{ github.event_path }}"
          echo "Github Action Event Path: ${{ github.event.head_commit.modified }}"
          echo "Github Action Event Path: ${{ github.event.head_commit.added }}"
          echo "Github Action Event Path: ${{ github.event.head_commit.removed }}"
          
          # if not allowed actor exit 1 else echo "Allowed actor" and continue
          if [ ${{ contains(fromJSON('["push", "pull_request"]'), github.event_name) }} == false ]; then
            echo "Not allowed event"
            exit 1
          fi
          echo "Allowed event"

          echo "Allowed Authors: ${{ vars.ALLOWED_AUTHORS }}"
          echo "Github Actor: ${{ github.actor }}"  
          echo "Github Actor: ${{ contains('${{ vars.ALLOWED_AUTHORS }}', github.actor) }}"
          echo "Github Actor: ${{ github.actor }}"
          echo "Github Event: ${{ github.event_name }}"
          echo "Github Ref: ${{ github.ref }}"
          echo "Github Workflow: ${{ github.workflow }}"
          echo "Github Workflow Path: ${{ github.workflow_path }}"

      - name: The job has failed
        if: ${{ failure() }}
        run: |
              echo "{{ steps.checkusers}}" 

              echo "The job has failed"
              echo "Test results: ${{ job.status }}"
              echo "Test results: ${{ job.steps }}"
              echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
    
      - name: The job has succeeded
        if: ${{ success() }}
        run: |
              echo "The job has succeeded"
              echo "Test results: ${{ job.status }}"
              echo "Test results: ${{ job.steps }}"
              echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
  # test:
  #   if: contains('${{ vars.ALLOWED_AUTHORS }}', github.actor)
  #   needs: permission
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       # test with nodejs 21.x
  #       node-version: [21.x]

  #   steps:
  #     - name: ‚¨áÔ∏è Checkout repository
  #       uses: actions/checkout@v3

  #     - name: üì¶ Use Node.js ${{ matrix.node-version }} using setup-node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - uses: pnpm/action-setup@v3
  #       name: Install pnpm
  #       with:
  #         version: latest
  #         run_install: |
  #           - recursive: true
  #             args: [--frozen-lockfile]
  #           - args: [global, prettier, typescript]

  #     #- name: üì¶ Install dependencies
  #     #  run: pnpm install

  #     - name: üì¶ Build
  #       run: pnpm build

  #     - name: üì¶ Test
  #       run: pnpm test --if-present
  #       continue-on-error: true

  #     - name: üß™ Test results
  #       if: always()
  #       run: |
  #         echo "Test results: ${{ job.status }}"
  #         echo "Test results: ${{ job.steps }}"
  #         echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"

  #     - name: The job has failed
  #       if: ${{ failure() }}
  #       run: |
  #           echo "The job has failed"
  #           echo "Test results: ${{ job.status }}"
  #           echo "Test results: ${{ job.steps }}"
  #           echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
  
  #     - name: The job has succeeded
  #       if: ${{ success() }}
  #       run: |
  #           echo "The job has succeeded"
  #           echo "Test results: ${{ job.status }}"
  #           echo "Test results: ${{ job.steps }}"
  #           echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
  # runcov:
  #   if: contains('${{ vars.ALLOWED_AUTHORS }}', github.actor)
  #   runs-on: ubuntu-latest
  #   needs: test
  #   strategy:
  #     matrix:
  #       node-version: [21.x]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
        
  #     - name: Set up Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}
        
  #     - uses: pnpm/action-setup@v3
  #       name: Install pnpm
  #       with:
  #         version: latest
  #         run_install: |
  #           - recursive: true
  #             args: [--frozen-lockfile]
  #           - args: [global, prettier, typescript]
        
  #     - name: Run the tests
  #       run: pnpm test -- --coverage
        
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         # flags: unittests
  #         # name: codecov-umbrella
  #         fail_ci_if_error: false
  check_changes:
    runs-on: ubuntu-latest
    needs:
      - permission
    outputs:
      src_changed: ${{ steps.check_src.outputs.src_changed }}
      k8s_changed: ${{ steps.check_k8s.outputs.k8s_changed }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for changes in src
        id: check_src
        run: |
          echo "Checking for changes in 'src/'..."
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- 'src/' | grep -q 'src/'; then
            echo "src_changed=true" >> $GITHUB_OUTPUT
          else
            echo "src_changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for changes in k8s
        id: check_k8s
        run: |
          echo "Checking for changes in 'k8s/'..."
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- 'k8s/' | grep -q 'k8s/'; then
            echo "k8s_changed=true" >> $GITHUB_OUTPUT
          else
            echo "k8s_changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Retrieve apiVer from package.json
        id: apiVer
        run: |
          echo "Retrieving apiVer from package.json..."
          echo "apiVer=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT
  
  logs:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs:
      - permission
      - check_changes
    steps:
      - run: |
          echo "View the logs of the previous jobs ${{ needs.check_changes.outputs.src_changed }} ${{ needs.check_changes.outputs.k8s_changed }}"
          echo "The apiVer is ${{ needs.check_changes.outputs.apiVer }}"

  building:
    permissions:
      contents: 'read'
      id-token: 'write'
    # if: ${{ needs.check_changes.outputs.src_changed == 'true' }}
    runs-on: ubuntu-latest
    needs: 
      - permission
      - check_changes
    # needs: 
    #   - test
    #   - runcov
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v2

      - name: ‚öôÔ∏è Setup Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'

      - name: ‚öôÔ∏è Setup Docker Auth
        id: docker-auth
        uses: docker/login-action@v3
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: _json_key
          password: '${{ env.GCP_CREDENTIALS }}'

      - name: ü§ñüî® Build and Push Container
        run: |
          docker build -t "${{ env.APP_NAME }}:last" .
          docker tag "${{ env.APP_NAME }}:last" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ github.ref == 'refs/heads/master' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || 'dev' }}:${{ github.sha }}"
          docker tag "${{ env.APP_NAME }}:last" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ github.ref == 'refs/heads/master' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || 'dev' }}:$(cat package.json | jq -r .version)"
          docker tag "${{ env.APP_NAME }}:last" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ github.ref == 'refs/heads/master' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || 'dev' }}:latest"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ env.DEPLOY_ENV }}:${{ github.sha }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ env.DEPLOY_ENV }}:$(cat package.json | jq -r .version)"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ env.DEPLOY_ENV }}:latest"

      - name: The job has failed
        if: ${{ failure() }}
        run: |
          echo "The job has failed"
          echo "Test results: ${{ job.status }}"
          echo "Test results: ${{ job.steps }}"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"

      - name: The job has succeeded
        if: ${{ success() }}
        run: |
          echo "The job has succeeded"
          echo "Test results: ${{ job.status }}"
          echo "Test results: ${{ job.steps }}"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"

  deployment:
    # if: needs.check_changes.outputs.src_changed == 'true' || needs.check_changes.outputs.k8s_changed == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs:
      # - test
      # - runcov
      - permission
      - check_changes
      - building
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v2

      - name: ‚öôÔ∏è Setup Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'

      - name: ‚öôÔ∏è Setup Docker Auth
        id: docker-auth
        uses: docker/login-action@v3
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: _json_key
          password: '${{ env.GCP_CREDENTIALS }}'

      - name: üì¢ Get the URL of the deployed service
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Set up kubectl
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --region ${{ env.REGION }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: Apply the k8s/*.yaml files
        run: |
          echo "Aplicando configuraciones para ${DEPLOY_ENV}"
          # check if namespace exists
          kubectl get namespace safe-wave-${{ env.DEPLOY_ENV }} || kubectl create namespace safe-wave-${{ env.DEPLOY_ENV }}

          # chmod +x ./scripts/replace-env.sh
          chmod +x /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh
          # ./scripts/replace-env.sh LOCATION=${env.REGION} ENVIRONMENT=${DEPLOY_ENV}:sha256:4cb6936db9b12e4e64711426c591f5e738f445d0a80c877b317a6ba914116c69
          #  "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ env.DEPLOY_ENV }}:${{ github.sha }}"
          /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh \
            deployment.yaml \
            CONFIG_LOCATION=${{env.GAR_LOCATION}} \
            CONFIG_PROJECT_ID=${{env.PROJECT_ID}} \
            CONFIG_SERVICE=${{env.SERVICE}} \
            CONFIG_APP_NAME=${{env.APP_NAME}} \
            CONFIG_ENVIRONMENT=${{env.DEPLOY_ENV}} \
            CONFIG_VERSION=${{github.sha}}

          /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh \
            hpa-configmap.yaml \
            CONFIG_ENVIRONMENT=${{env.DEPLOY_ENV}}
          echo "Manifiesto despu√©s de reemplazar variables:"
          cat /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s/deployment.yaml
          cat /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s/hpa-configmap.yaml
          echo "Aplicando manifiestos:"
          kubectl apply -f /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s -n safe-wave-${{ env.DEPLOY_ENV }}
          kubectl rollout status deployment/${{ env.APP_NAME }} -n safe-wave-${{ env.DEPLOY_ENV }}

       # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      # - id: 'get-pods'
      #   run: 'kubectl get pods -n safe-wave-${{ env.DEPLOY_ENV }}'
        
      # - name: Configure kubectl
      #   run: |
      #     gcloud config set project ${{ env.PROJECT_ID }}
      #     gcloud config set compute/zone ${{ env.REGION }}
      #     gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --zone ${{ env.REGION }} --project ${{ env.PROJECT_ID }}
  
  
      # - name: Apply the k8s/manifests.yaml file
      #   run: kubectl apply -f /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s/manifests_2.yaml -n safe-wave-${{ env.DEPLOY_ENV }}

      # - uses: firehed/deploy-to-kubernetes-action@v0.3.0
      #   with:
      #     namespace: safe-wave-${{ env.DEPLOY_ENV }}
      #     environment: ${{ env.DEPLOY_ENV }}
      #     deployment: v1
      #     container: server
      #     image: us-docker.pkg.dev/safe-wave-377002/cloud-run-source-deploy/cuenta-movimiento-backend-dev:sha256:4cb6936db9b12e4e64711426c591f5e738f445d0a80c877b317a6ba914116c69
      #     token: ${{ secrets.GH_TOKEN }}


      - name: The job has failed
        if: ${{ failure() }}
        run: |
          echo "The job has failed"
          echo "Test results: ${{ job.status }}"
          echo "Test results: ${{ job.steps }}"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"

      - name: The job has succeeded
        if: ${{ success() }}
        run: |
          echo "The job has succeeded"
          echo "Test results: ${{ job.status }}"
          echo "Test results: ${{ job.steps }}"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"

      - name: Mark the deployment as successful
        if: ${{ success() }}
        run: |
          echo "Deployment was successful"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Ref: ${{ github.ref }}"
          echo "Event Workflow: ${{ github.workflow }}"
          echo "Event Workflow Path: ${{ github.workflow_path }}"
  
  # deployment-without-changes:
  #   ## if building step is skipped and deployment step is skipped
  #   if: needs.check_changes.outputs.src_changed == 'false' && needs.check_changes.outputs.k8s_changed == 'false'
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   runs-on: ubuntu-latest
  #   needs:
  #     # - test
  #     # - runcov
  #     - permission
  #     - check_changes
  #   steps:
  #     - name: ‚¨áÔ∏è Checkout repository
  #       uses: actions/checkout@v2

  #     - name: ‚öôÔ∏è Setup Google Auth
  #       id: auth
  #       uses: 'google-github-actions/auth@v2'
  #       with:
  #         credentials_json: '${{ env.GCP_CREDENTIALS }}'

  #     - name: print as json the steps.check_changes.outputs.src_changed
  #       run: |
  #         echo "steps.check_changes.outputs.src_changed: ${{ steps.check_changes.outputs.src_changed }}"
  #         echo "steps.check_changes.outputs.k8s_changed: ${{ steps.check_changes.outputs.k8s_changed }}"

  #     - name: ‚öôÔ∏è Setup Docker Auth
  #       id: docker-auth
  #       uses: docker/login-action@v3
  #       with:
  #         registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
  #         username: _json_key
  #         password: '${{ env.GCP_CREDENTIALS }}'

  #     - name: üì¢ Get the URL of the deployed service
  #       run: echo ${{ steps.deploy.outputs.url }}

  #     - name: Set up kubectl
  #       run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --region ${{ env.REGION }}

  #     - name: Get GKE credentials
  #       uses: google-github-actions/get-gke-credentials@main
  #       with:
  #         cluster_name: ${{ env.GKE_CLUSTER_NAME }}
  #         location: ${{ env.REGION }}

  #     - name: Apply the k8s/*.yaml files
  #       run: |
  #           echo "Aplicando configuraciones para ${DEPLOY_ENV}"
  #           # chmod +x ./scripts/replace-env.sh
  #           chmod +x /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh
  #           # ./scripts/replace-env.sh LOCATION=${env.REGION} ENVIRONMENT=${DEPLOY_ENV}
  #           #  "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_NAME }}-${{ env.DEPLOY_ENV }}:latest"
  #           /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh \
  #             deployment.yaml \
  #             CONFIG_LOCATION=${{env.GAR_LOCATION}} \
  #             CONFIG_PROJECT_ID=${{env.PROJECT_ID}} \
  #             CONFIG_SERVICE=${{env.SERVICE}} \
  #             CONFIG_APP_NAME=${{env.APP_NAME}} \
  #             CONFIG_ENVIRONMENT=${{env.DEPLOY_ENV}} \
  #             CONFIG_VERSION=${{github.sha}}
  
  #           /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/scripts/replace-env.sh \
  #             hpa-configmap.yaml \
  #             CONFIG_ENVIRONMENT=${{env.DEPLOY_ENV}}
  #           echo "Manifiesto despu√©s de reemplazar variables:"
  #           cat /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s/deployment.yaml
  #           cat /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s/hpa-configmap.yaml
  #           echo "Aplicando manifiestos:"
  #           kubectl apply -f /home/runner/work/cuenta-movimiento-backend/cuenta-movimiento-backend/k8s -n safe-wave-${{ env.DEPLOY_ENV }}
  #           kubectl rollout status deployment/${{ env.APP_NAME }} -n safe-wave-${{ env.DEPLOY_ENV }}
  
  lastPRMerge:
    if: contains('${{ vars.ALLOWED_AUTHORS }}', github.actor)
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs:
      # - test
      # - runcov
      - permission
      # - building
      - deployment
    steps:
      - name: Mark the last PR as merged
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            await github.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              state: 'closed'
            });
            console.log(`PR #${pr.data.number} has been closed`);
            